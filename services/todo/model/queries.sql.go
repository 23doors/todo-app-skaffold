// Code generated by sqlc. DO NOT EDIT.
// source: queries.sql

package model

import (
	"context"

	"github.com/google/uuid"
)

const create = `-- name: Create :exec
INSERT INTO todo (id, title, content) VALUES ($1, $2, $3)
`

type CreateParams struct {
	ID      uuid.UUID
	Title   string
	Content string
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) error {
	_, err := q.db.ExecContext(ctx, create, arg.ID, arg.Title, arg.Content)
	return err
}

const delete = `-- name: Delete :exec
DELETE FROM todo WHERE id=$1
`

func (q *Queries) Delete(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, delete, id)
	return err
}

const deleteAll = `-- name: DeleteAll :exec
DELETE FROM todo
`

func (q *Queries) DeleteAll(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAll)
	return err
}

const get = `-- name: Get :one
SELECT id, title, content FROM todo WHERE id=$1
`

func (q *Queries) Get(ctx context.Context, id uuid.UUID) (Todo, error) {
	row := q.db.QueryRowContext(ctx, get, id)
	var i Todo
	err := row.Scan(&i.ID, &i.Title, &i.Content)
	return i, err
}

const list = `-- name: List :many
SELECT id, title, content FROM todo
`

func (q *Queries) List(ctx context.Context) ([]Todo, error) {
	rows, err := q.db.QueryContext(ctx, list)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Todo
	for rows.Next() {
		var i Todo
		if err := rows.Scan(&i.ID, &i.Title, &i.Content); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
